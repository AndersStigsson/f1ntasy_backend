"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var colors_1 = __importDefault(require("colors"));
var fs_1 = __importDefault(require("fs"));
var util_1 = __importDefault(require("util"));
var Levels = {
    info: {
        color: 'green',
        prefix: 'INFO',
    },
    imp: {
        color: 'magenta',
        prefix: 'IMPORTANT',
    },
    warn: {
        color: 'yellow',
        prefix: 'WARNING',
    },
    err: {
        color: 'red',
        prefix: 'ERROR',
    }
};
var Logger = (function () {
    function Logger(mode, filePath, timestamp, format, customLogger) {
        this._mode = mode || Logger.initMode();
        this._filePath = filePath || Logger.initFilePath();
        this._timestamp = (timestamp !== undefined ? timestamp : Logger.initTimestamp());
        this._format = format || Logger.initFormat();
        this._customLogger = customLogger || Logger.customLogger;
    }
    Logger.initMode = function () {
        if (!!process.env.JET_LOGGER_MODE) {
            return process.env.JET_LOGGER_MODE.toLocaleUpperCase();
        }
        else {
            return "CONSOLE";
        }
    };
    Logger.initFilePath = function () {
        if (!!process.env.JET_LOGGER_FILEPATH) {
            return process.env.JET_LOGGER_FILEPATH;
        }
        else {
            return Logger.DEFAULT_LOG_FILE_NAME;
        }
    };
    Logger.initTimestamp = function () {
        if (!!process.env.JET_LOGGER_TIMESTAMP) {
            return (process.env.JET_LOGGER_TIMESTAMP.toLocaleUpperCase() === 'TRUE');
        }
        else {
            return true;
        }
    };
    Logger.initFormat = function () {
        if (!!process.env.JET_LOGGER_FORMAT) {
            return process.env.JET_LOGGER_FORMAT.toLocaleUpperCase();
        }
        else {
            return "LINE";
        }
    };
    Object.defineProperty(Logger, "mode", {
        get: function () {
            return Logger._mode;
        },
        set: function (mode) {
            Logger._mode = mode;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "mode", {
        get: function () {
            return this._mode;
        },
        set: function (mode) {
            this._mode = mode;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger, "filePath", {
        get: function () {
            return Logger._filePath;
        },
        set: function (filePath) {
            Logger._filePath = filePath;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "filePath", {
        get: function () {
            return this._filePath;
        },
        set: function (filePath) {
            this._filePath = filePath;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger, "timestamp", {
        get: function () {
            return Logger._timestamp;
        },
        set: function (timestamp) {
            Logger._timestamp = timestamp;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "timestamp", {
        get: function () {
            return this._timestamp;
        },
        set: function (timestamp) {
            this._timestamp = timestamp;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger, "format", {
        get: function () {
            return Logger._format;
        },
        set: function (format) {
            Logger._format = format;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "format", {
        get: function () {
            return this._format;
        },
        set: function (format) {
            this._format = format;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger, "customLogger", {
        get: function () {
            return Logger._customLogger;
        },
        set: function (customLogger) {
            Logger._customLogger = customLogger;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "customLogger", {
        get: function () {
            return this._customLogger;
        },
        set: function (customLogger) {
            this._customLogger = customLogger;
        },
        enumerable: false,
        configurable: true
    });
    Logger.Info = function (content, printFull) {
        Logger.PrintLogHelper(content, printFull || false, Levels.info);
    };
    Logger.Imp = function (content, printFull) {
        Logger.PrintLogHelper(content, printFull || false, Levels.imp);
    };
    Logger.Warn = function (content, printFull) {
        Logger.PrintLogHelper(content, printFull || false, Levels.warn);
    };
    Logger.Err = function (content, printFull) {
        Logger.PrintLogHelper(content, printFull || false, Levels.err);
    };
    Logger.PrintLogHelper = function (content, printFull, level) {
        Logger.PrintLog(content, printFull, level, Logger.mode, Logger.timestamp, Logger.format, Logger.filePath, Logger.customLogger);
    };
    Logger.prototype.info = function (content, printFull) {
        this.printLogHelper(content, printFull || false, Levels.info);
    };
    Logger.prototype.imp = function (content, printFull) {
        this.printLogHelper(content, printFull || false, Levels.imp);
    };
    Logger.prototype.warn = function (content, printFull) {
        this.printLogHelper(content, printFull || false, Levels.warn);
    };
    Logger.prototype.err = function (content, printFull) {
        this.printLogHelper(content, printFull || false, Levels.err);
    };
    Logger.prototype.printLogHelper = function (content, printFull, level) {
        Logger.PrintLog(content, printFull, level, this.mode, this.timestamp, this.format, this.filePath, this.customLogger);
    };
    Logger.PrintLog = function (content, printFull, level, mode, timestamp, format, filePath, customLogger) {
        if (mode === "OFF") {
            return;
        }
        var jsonContent = {};
        if (printFull) {
            content = util_1.default.inspect(content);
        }
        if (format === "JSON") {
            jsonContent.message = content;
        }
        if (mode !== "CUSTOM") {
            if (format === "LINE") {
                content = level.prefix + ': ' + content;
            }
            else if (format === "JSON") {
                jsonContent.level = level.prefix;
            }
        }
        if (timestamp) {
            if (format === "LINE") {
                var time = '[' + new Date().toISOString() + '] ';
                content = time + content;
            }
            else if (format === "JSON") {
                jsonContent.timestamp = new Date().toISOString();
            }
        }
        if (format === "JSON") {
            content = JSON.stringify(jsonContent);
        }
        if (mode === "CONSOLE") {
            var colorFn = colors_1.default[level.color];
            console.log(colorFn(content));
        }
        else if (mode === "FILE") {
            Logger.WriteToFile(content + '\n', filePath);
        }
        else if (mode === "CUSTOM") {
            if (!!customLogger) {
                customLogger.sendLog(new Date(), level.prefix, content);
            }
            else {
                throw Error(Logger.CUSTOM_LOGGER_ERR);
            }
        }
        else {
            throw Error('The correct logger mode was not specified: Must be "CUSTOM", "FILE", ' +
                '"OFF", or "CONSOLE".');
        }
    };
    Logger.WriteToFile = function (content, filePath) {
        try {
            var fileExists = Logger.CheckExists(filePath);
            if (fileExists) {
                fs_1.default.appendFileSync(filePath, content);
            }
            else {
                fs_1.default.writeFileSync(filePath, content);
            }
        }
        catch (err) {
            console.error(err);
        }
    };
    Logger.CheckExists = function (filePath) {
        try {
            fs_1.default.accessSync(filePath);
            return true;
        }
        catch (e) {
            return false;
        }
    };
    Logger.DEFAULT_LOG_FILE_NAME = 'jet-logger.log';
    Logger.CUSTOM_LOGGER_ERR = 'Custom logger mode set to true, but no ' +
        'custom logger was provided.';
    Logger._mode = Logger.initMode();
    Logger._filePath = Logger.initFilePath();
    Logger._timestamp = Logger.initTimestamp();
    Logger._format = Logger.initFormat();
    Logger._customLogger = null;
    return Logger;
}());
exports.default = Logger;
